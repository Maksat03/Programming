# https://www.programiz.com/python-programming & https://www.w3schools.com/python/python_reference.asp

# +++++++++++++++++++++++Арифметические операторы Python+++++++++++++++++++++++

# Что такое оператор и операнды? Это можно объяснить простым примером: «10 + 5 = 15». 
# В этом выражении 10 и 5 — операнды. Знак «+» — оператор.
# Пусть переменная a = 10, а переменная b = 5
# +----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------+
# | Оператор | Описание                                                                                                                                                                                                                | Пример                 |
# +----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------+
# | +        | Добавление — добавляет левый операнд к правому                                                                                                                                                                          | a + b = 15             |
# | −        | Вычитание — вычитает правый операнд из левого                                                                                                                                                                           | a − b = 5              |
# | *        | Умножение — умножает левый операнд на правый                                                                                                                                                                            | a * b = 50             |
# | /        | Деление — делит левый операнд на правый                                                                                                                                                                                 | a / b = 2              |
# | %        | Деление по модулю — делит левый операнд на правый и возвращает остаток. С помощью него, например, можно проверять числа на четность и нечетность. Если левый операнд меньше правого, то результатом будет левый операнд | a % b = 0              |
# | **       | Возведение в степень                                                                                                                                                                                                    | a**b = 100000          |
# | //       | Целочисленное деление — деление в котором возвращается только целая часть результата. Часть после запятой отбрасывается.                                                                                                | 9//2=4, а 9.0//2.0=4.0 |
# +----------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------------+

# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# +++++++++++++++++++++++Ключевые слова Python+++++++++++++++++++++++

# Ключевые слова — это часть языка. Их нельзя использовать для названия переменных, функций или классов.
# +----------------+-------------------------------------------------------------------------------------------------------------+
# | Ключевое слово | Описание                                                                                                    |
# +----------------+-------------------------------------------------------------------------------------------------------------+
# | False          | ложь                                                                                                        |
# | True           | правда                                                                                                      |
# | None           | «пустой» объект                                                                                             |
# | and            | логическое И                                                                                                |
# | with / as      | менеджер контекста                                                                                          |
# | assert условие | возбуждает исключение, если условие ложно                                                                   |
# | break          | выход из цикла                                                                                              |
# | class          | пользовательский тип, состоящий из методов и атрибутов                                                      |
# | continue       | переход на следующую итерацию цикла                                                                         |
# | def            | определение функции                                                                                         |
# | del            | удаление объекта                                                                                            |
# | elif           | в противном случае, если                                                                                    |
# | else           | иначе                                                                                                       |
# | except         | перехватить исключение                                                                                      |
# | finally        | вместе с инструкцией try, выполняет инструкции независимо от того, было ли исключение или нет               |
# | for            | цикл for                                                                                                    |
# | from           | импорт нескольких функций из модуля                                                                         |
# | global         | позволяет сделать значение переменной, присвоенное ей внутри функции, доступным и за пределами этой функции |
# | if             | если                                                                                                        |
# | import         | импорт модуля                                                                                               |
# | in             | проверка на вхождение                                                                                       |
# | is             | ссылаются ли 2 объекта на одно и то же место в памяти                                                       |
# | lambda         | определение анонимной функции                                                                               |
# | nonlocal       | позволяет сделать значение переменной, присвоенное ей внутри функции, доступным в объемлющей инструкции     |
# | not            | логическое НЕ                                                                                               |
# | or             | логическое ИЛИ                                                                                              |
# | pass           | ничего не делающая конструкция                                                                              |
# | raise          | возбудить исключение                                                                                        |
# | return         | вернуть результат                                                                                           |
# | try            | выполнить инструкции, перехватывая исключения                                                               |
# | while          | цикл while                                                                                                  |
# | yield          | определение функции-генератора                                                                              |
# +----------------+-------------------------------------------------------------------------------------------------------------+

# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# +++++++++++++++++++++++Операторы сравнения Python+++++++++++++++++++++++

# Что такое оператор и операнды? Это можно объяснить простым примером: 10 > 5. 
# В этом выражении 10 и 5 — левый и правый операнды. Знак «>» — оператор.
# Пусть переменная a = 10, а переменная b = 5
# +----------+-----------------------------------------------------------------------------------------------------+--------+-----------+
# | Оператор | Описание                                                                                            | Пример | Результат |
# +----------+-----------------------------------------------------------------------------------------------------+--------+-----------+
# | ==       | проверяет одинаково ли значение операндов, если одинаковы – то условие является истиной             | a == b | False     |
# | !=       | проверяет одинаково ли значение операндов, если НЕ одинаковы – то условие является истиной          | a != b | True      |
# | >        | проверяет значение левого операнда, если он больше, чем правый – то условие является истиной        | a > b  | True      |
# | <        | проверяет значение левого операнда, если он меньше, чем правый – то условие является истиной        | a < b  | False     |
# | >=       | проверяет значение левого операнда, если он больше или равен правому – то условие является истиной  | a >= b | True      |
# | <=       | проверяет значение левого операнда, если он меньше либо равен правому – то условие является истиной | a <= b | False     |
# +----------+-----------------------------------------------------------------------------------------------------+--------+-----------+

# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# +++++++++++++++++++++++Операторы присваивания в Python+++++++++++++++++++++++
# +----------+----------------------------------------------------------------------------------------------------+-------------------------------------------------------+
# | Оператор | Описание                                                                                           | Пример                                                |
# +----------+----------------------------------------------------------------------------------------------------+-------------------------------------------------------+
# | =        | Присваивает значение правого операнда левому                                                       | c = 23 присвоит переменной с значение 23              |
# | +=       | Прибавит значение правого операнда к левому и присвоит эту сумму левому операнду                   | с=5; а=2; с+=а равносильно: с=с+а. с будет равно 7    |
# | −=       | Отнимает значение правого операнда от левого и присваивает результат левому операнду               | с-=а равносильно: с=с-а. с будет равно 3              |
# | *=       | Умножает правый операнд с левым и присваивает результат левому операнду                            | с*=а равносильно: с=с*а. c будет равно 10             |
# | /=       | Делит левый операнд на правый и присваивает результат левому операнду                              | с=10; а=2; с/=а равносильно: с=с/а. c будет равно 5   |
# | %=       | Делит по модулю операнды и присваивает результат левому                                            | с=5; а=2; с%=а равносильно: с=с%а. c будет равно 1    |
# | **=      | Возводит левый операнд в степень правого и присваивает результат левому операнду                   | с=3; а=2; с**=а равносильно: с=с**а. c будет равно 9  |
# | //=      | Производит целочисленное деление левого операнда на правый и присваивает результат левому операнду | с=11; а=2; с//=а равносильно: с=с//а. c будет равно 5 |
# +----------+----------------------------------------------------------------------------------------------------+-------------------------------------------------------+

# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# +++++++++++++++++++++++Следующие значения считаются ложными в Python+++++++++++++++++++++++

# None
# False
# Ноль любого числового типа. Например (0, 0.0)
# Пустая последовательность Например ((), [], '')
# Пустое отображение. Например {}
# объекты классов, которые имеют метод __bool__() or __len()__ который возвращает 0 или False
# Все остальные значения, кроме этих, считаются истинными.

# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||



















